{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome TwometerVR is an open-source alternative to commercial VR hand/body tracking systems. It's primarily intended for those who have a VR headset such as the Oculus DK2 that don't include controllers. It is a low-cost alternative to expensive commercial devices such as the PS Move or Oculus Touch system. Features 3D hand tracking controllers with 7 buttons and 9-DoF IMUs Works with BeatSaber, VRChat, or any other SteamVR game Low-cost with around $15 per controller Fully open-source and open-hardware Although there is no implementation at the moment, the system supports a lot of trackers and can therefore support 5-point body tracking. Getting started As this is currently a hobby project of mine, there are no ready-made products or kits available for purchase. To learn about the way the system works, check out the system structure page . If you're interested in the hardware, you can find all the required 3D models and PCB layouts on the hardware page . The source code is available in the GitHub repo . Pictures todo","title":"Welcome"},{"location":"#welcome","text":"TwometerVR is an open-source alternative to commercial VR hand/body tracking systems. It's primarily intended for those who have a VR headset such as the Oculus DK2 that don't include controllers. It is a low-cost alternative to expensive commercial devices such as the PS Move or Oculus Touch system.","title":"Welcome"},{"location":"#features","text":"3D hand tracking controllers with 7 buttons and 9-DoF IMUs Works with BeatSaber, VRChat, or any other SteamVR game Low-cost with around $15 per controller Fully open-source and open-hardware Although there is no implementation at the moment, the system supports a lot of trackers and can therefore support 5-point body tracking.","title":"Features"},{"location":"#getting-started","text":"As this is currently a hobby project of mine, there are no ready-made products or kits available for purchase. To learn about the way the system works, check out the system structure page . If you're interested in the hardware, you can find all the required 3D models and PCB layouts on the hardware page . The source code is available in the GitHub repo .","title":"Getting started"},{"location":"#pictures","text":"todo","title":"Pictures"},{"location":"Basics/Hardware/","text":"Hardware files Here you can find the source files for building the hardware (PCBs and 3D models) PCBs Each controller has three PCBs in it. They are all on EasyEDA and can be downloaded here: Mainboard Buttons PCB LED PCB CAD files The case for a controller also consists of multiple 3D-printed parts. The Fusion360 files can be downloaded here: Controller case Tracker ball Tracker ball adapter Buttons","title":"Hardware files"},{"location":"Basics/Hardware/#hardware-files","text":"Here you can find the source files for building the hardware (PCBs and 3D models)","title":"Hardware files"},{"location":"Basics/Hardware/#pcbs","text":"Each controller has three PCBs in it. They are all on EasyEDA and can be downloaded here: Mainboard Buttons PCB LED PCB","title":"PCBs"},{"location":"Basics/Hardware/#cad-files","text":"The case for a controller also consists of multiple 3D-printed parts. The Fusion360 files can be downloaded here: Controller case Tracker ball Tracker ball adapter Buttons","title":"CAD files"},{"location":"Basics/System%20structure/","text":"System structure TwometerVR is a complex system with many components that need to work together in order to make it work. The components described in this document are named after the naming scheme described here . You may want to read this first for a clearer understanding. Trackers Each tracker at least requires a glowing colored 4cm sphere for positional tracking. Trackers that also report orientation, as well as hand controllers, need more intelligent logic. They are based around an ESP8266 WiFi chip. Communication with the host computer is done using WiFi and a binary UDP protocol, which is documented here . The WiFi chip streams the orientation of the controller along with the state of any buttons to the server. It can also receive messages, so that in the future one can add communication from the server to the client. This can be useful for features like haptic feedback. To learn more about how the server knows which trackers are which, check out the Tracker identification page . Server The server is a program running on the host computer. It has multiple different functions: It uses the computer's webcam (preferrably a PSMove camera for high refresh rates) to track the trackers' glowing spheres. Their 3D position is then computed and stored. The server also provides the UDP endpoint to which the trackers send their orientation and button data. The server then merges all this data and transmits it to the SteamVR driver, which is required in order to play VR games and apps with the system. Driver In order to let games know about the state of the trackers, TVR implements a SteamVR extension, called a driver. This is the last step for the tracker data, which is received from the server and converted into a format SteamVR understands.","title":"System structure"},{"location":"Basics/System%20structure/#system-structure","text":"TwometerVR is a complex system with many components that need to work together in order to make it work. The components described in this document are named after the naming scheme described here . You may want to read this first for a clearer understanding.","title":"System structure"},{"location":"Basics/System%20structure/#trackers","text":"Each tracker at least requires a glowing colored 4cm sphere for positional tracking. Trackers that also report orientation, as well as hand controllers, need more intelligent logic. They are based around an ESP8266 WiFi chip. Communication with the host computer is done using WiFi and a binary UDP protocol, which is documented here . The WiFi chip streams the orientation of the controller along with the state of any buttons to the server. It can also receive messages, so that in the future one can add communication from the server to the client. This can be useful for features like haptic feedback. To learn more about how the server knows which trackers are which, check out the Tracker identification page .","title":"Trackers"},{"location":"Basics/System%20structure/#server","text":"The server is a program running on the host computer. It has multiple different functions: It uses the computer's webcam (preferrably a PSMove camera for high refresh rates) to track the trackers' glowing spheres. Their 3D position is then computed and stored. The server also provides the UDP endpoint to which the trackers send their orientation and button data. The server then merges all this data and transmits it to the SteamVR driver, which is required in order to play VR games and apps with the system.","title":"Server"},{"location":"Basics/System%20structure/#driver","text":"In order to let games know about the state of the trackers, TVR implements a SteamVR extension, called a driver. This is the last step for the tracker data, which is received from the server and converted into a format SteamVR understands.","title":"Driver"},{"location":"Basics/Tracker%20Identification/","text":"Tracker identification When registering with the server, the tracker transmits its class, color and serial number. The server then generates a unique 7-bit ID for that tracker. For subsequent pose updates, only this ID is sent. Tracker colors Trackers are identified by the color of their tracking ball. The following colors are reserved as they were determined to be the most distinguishable by the video camera. May change in the future as tests go on. 0x00 : Invalid (internal use) 0x01 : Red (#FF0000): Left hand 0x02 : Blue (#0000FF): Right hand 0x03 : Green (#00FF00): Left leg 0x04 : Magenta (#FF00FF): Right leg 0x05 : Cyan (#FFFF00): Hips 0x06 : Yellow (#FFFF00): Generic Not required for 5-point body tracking and may therefore be used for any other object that should be tracked. ..0x7F : Reserved for future use 0x80..0xFF : May be used by extensions Tracker classes 0x00 : Invalid (internal use) 0x01 : Controller 0x02 : Body tracker 0x03 : Generic tracker ..0x7F : Reserved for future use 0x80..0xFF : May be used by extensions Tracker IDs Tracker IDs are randomly generated numbers that are used to easily identify trackers after a 0x82 Handshake packet. To ensure uniqueness in the current tracking setup, IDs are managed by the server. The server informs the client of its ID using the 0x83 Handshake Reply packet. More information about these packets packet can be found in the protocol documentation .","title":"Tracker identification"},{"location":"Basics/Tracker%20Identification/#tracker-identification","text":"When registering with the server, the tracker transmits its class, color and serial number. The server then generates a unique 7-bit ID for that tracker. For subsequent pose updates, only this ID is sent.","title":"Tracker identification"},{"location":"Basics/Tracker%20Identification/#tracker-colors","text":"Trackers are identified by the color of their tracking ball. The following colors are reserved as they were determined to be the most distinguishable by the video camera. May change in the future as tests go on. 0x00 : Invalid (internal use) 0x01 : Red (#FF0000): Left hand 0x02 : Blue (#0000FF): Right hand 0x03 : Green (#00FF00): Left leg 0x04 : Magenta (#FF00FF): Right leg 0x05 : Cyan (#FFFF00): Hips 0x06 : Yellow (#FFFF00): Generic Not required for 5-point body tracking and may therefore be used for any other object that should be tracked. ..0x7F : Reserved for future use 0x80..0xFF : May be used by extensions","title":"Tracker colors"},{"location":"Basics/Tracker%20Identification/#tracker-classes","text":"0x00 : Invalid (internal use) 0x01 : Controller 0x02 : Body tracker 0x03 : Generic tracker ..0x7F : Reserved for future use 0x80..0xFF : May be used by extensions","title":"Tracker classes"},{"location":"Basics/Tracker%20Identification/#tracker-ids","text":"Tracker IDs are randomly generated numbers that are used to easily identify trackers after a 0x82 Handshake packet. To ensure uniqueness in the current tracking setup, IDs are managed by the server. The server informs the client of its ID using the 0x83 Handshake Reply packet. More information about these packets packet can be found in the protocol documentation .","title":"Tracker IDs"},{"location":"Meta/Definitions/","text":"Definitions There are many constants used throughout the TVR project. Below, you can find an overview of them. Steam VR Universe ID: 0x02 0x16 0x39 0xA0 = 2688095746 Networking ports Server \u21c4 Driver: 20156 Server \u21c4 Tracker (Broadcast): 20157 Server \u21c4 Tracker (Unicast): 20158 Protocol definitions All multi-byte integer values are little-endian Packets longer than 4 KB (4096 bytes) are not accepted by any endpoint vec3 : 3 sequential 32-bit floating-point values in order [x, y, z] that encode a 3D vector vec4 : 4 sequential 32-bit floating-point values in order [x, y, z, w] that encode a quaternion type[] : Array of objects, is prefixed by a [uint8 length] that specifies the number of objects in the array. string : Null-terminated, ASCII-encoded string Button IDs 0 : A 1 : B 2 : Up 3 : Left 4 : Right 5 : Down 6 : Menu 7 : Trigger 8..15 : reserved","title":"Definitions"},{"location":"Meta/Definitions/#definitions","text":"There are many constants used throughout the TVR project. Below, you can find an overview of them.","title":"Definitions"},{"location":"Meta/Definitions/#steam-vr","text":"Universe ID: 0x02 0x16 0x39 0xA0 = 2688095746","title":"Steam VR"},{"location":"Meta/Definitions/#networking-ports","text":"Server \u21c4 Driver: 20156 Server \u21c4 Tracker (Broadcast): 20157 Server \u21c4 Tracker (Unicast): 20158","title":"Networking ports"},{"location":"Meta/Definitions/#protocol-definitions","text":"All multi-byte integer values are little-endian Packets longer than 4 KB (4096 bytes) are not accepted by any endpoint vec3 : 3 sequential 32-bit floating-point values in order [x, y, z] that encode a 3D vector vec4 : 4 sequential 32-bit floating-point values in order [x, y, z, w] that encode a quaternion type[] : Array of objects, is prefixed by a [uint8 length] that specifies the number of objects in the array. string : Null-terminated, ASCII-encoded string","title":"Protocol definitions"},{"location":"Meta/Definitions/#button-ids","text":"0 : A 1 : B 2 : Up 3 : Left 4 : Right 5 : Down 6 : Menu 7 : Trigger 8..15 : reserved","title":"Button IDs"},{"location":"Meta/Naming/","text":"Naming Throughout the TwometerVR documentation, various naming conventions and abbreviations are used: Names Tracker: Any tracked device. Controller: Handheld tracked devices with button input capabilities. Server: The main server running in the TwometerVR service. May also be called 'service'. Driver: The 'driver' extension for SteamVR. Host computer: The PC that runs the server, SteamVR etc. Abbreviations TVR: TwometerVR OVR: OpenVR / SteamVR","title":"Naming"},{"location":"Meta/Naming/#naming","text":"Throughout the TwometerVR documentation, various naming conventions and abbreviations are used:","title":"Naming"},{"location":"Meta/Naming/#names","text":"Tracker: Any tracked device. Controller: Handheld tracked devices with button input capabilities. Server: The main server running in the TwometerVR service. May also be called 'service'. Driver: The 'driver' extension for SteamVR. Host computer: The PC that runs the server, SteamVR etc.","title":"Names"},{"location":"Meta/Naming/#abbreviations","text":"TVR: TwometerVR OVR: OpenVR / SteamVR","title":"Abbreviations"},{"location":"Meta/Versioning/","text":"Versioning TwometerVR uses sematic versioning, that means MAJOR.MINOR.PATCH (e.g. 2.4.9 ) Prior to version 2, Some subprojects had wrong or unassigned version numbers. Now, every subproject has the same MAJOR version. However, each one may have different MINOR and PATCH parts. For consistency's sake, the version 2 rewrite reset the version of all subprojects back to 2.0.0","title":"Versioning"},{"location":"Meta/Versioning/#versioning","text":"TwometerVR uses sematic versioning, that means MAJOR.MINOR.PATCH (e.g. 2.4.9 ) Prior to version 2, Some subprojects had wrong or unassigned version numbers. Now, every subproject has the same MAJOR version. However, each one may have different MINOR and PATCH parts. For consistency's sake, the version 2 rewrite reset the version of all subprojects back to 2.0.0","title":"Versioning"},{"location":"Network/Driver%20Protocol/","text":"Driver Protocol This UDP binary protocol is used for IPC between the server and the SteamVR driver. Base structure [uint8 id][payload] 0x00 Tracker Connect Sent by the server to inform the driver of a new tracker [uint8 trackerId][uint8 trackerClass][uint8 trackerColor][string serialNo] 0x01 Tracker Disconnect If a tracker stops sending status updates for longer than 30 seconds, it is considered offline and the server will inform the driver of a lost tracker using this message. [uint8 trackerId] 0x02 Tracker States Used to tell the driver about state updates [TrackerStates[] states] Tracker state [uint8 trackerId][uint16 buttons][vec3 position][vec4 rotation][bool inRange] 0x03 Request Info Sent by the driver on starting up to request tracker information. Has no content. ..0x7F Reserved This range is reserved for future use. Extensions may use the 0x80..0xFF packet range.","title":"Driver Protocol"},{"location":"Network/Driver%20Protocol/#driver-protocol","text":"This UDP binary protocol is used for IPC between the server and the SteamVR driver.","title":"Driver Protocol"},{"location":"Network/Driver%20Protocol/#base-structure","text":"[uint8 id][payload]","title":"Base structure"},{"location":"Network/Driver%20Protocol/#0x00-tracker-connect","text":"Sent by the server to inform the driver of a new tracker [uint8 trackerId][uint8 trackerClass][uint8 trackerColor][string serialNo]","title":"0x00 Tracker Connect"},{"location":"Network/Driver%20Protocol/#0x01-tracker-disconnect","text":"If a tracker stops sending status updates for longer than 30 seconds, it is considered offline and the server will inform the driver of a lost tracker using this message. [uint8 trackerId]","title":"0x01 Tracker Disconnect"},{"location":"Network/Driver%20Protocol/#0x02-tracker-states","text":"Used to tell the driver about state updates [TrackerStates[] states]","title":"0x02 Tracker States"},{"location":"Network/Driver%20Protocol/#tracker-state","text":"[uint8 trackerId][uint16 buttons][vec3 position][vec4 rotation][bool inRange]","title":"Tracker state"},{"location":"Network/Driver%20Protocol/#0x03-request-info","text":"Sent by the driver on starting up to request tracker information. Has no content.","title":"0x03 Request Info"},{"location":"Network/Driver%20Protocol/#0x7f-reserved","text":"This range is reserved for future use. Extensions may use the 0x80..0xFF packet range.","title":"..0x7F Reserved"},{"location":"Network/Tracker%20Protocol/","text":"Tracker Protocol This UDP binary protocol is used for communication between the server and the trackers. Base structure [uint8 id][payload] If the MSB of id is set ( id & 0x80 != 0 ), then the lower 7 bytes of ID are treated as the ID of a management packet. If it's not set, the packet is interpreted as a tracker state packet and the lower 7 bytes are the tracker ID. 0x00-0x7F Tracker State [uint8 trackerId][uint16 buttons][vec4 rotation] buttons is a bitmask for pressed buttons: LSB->MSB is button 0->15 The button IDs are defined in the definitions file. 0x80 Discovery (Use Broadcast Channel) 0x80 0x02 0x16 0x39 0xA0 pID Identifier Identifier is a static key that identifies the Twometer VR 2.0 universe. It's the same as the SteamVR universe ID. The server must respond with 0x81 Discovery Reply 0x81 Discovery Reply 0x81 [string serverIp] serverIp contains the IP or hostname of the server. 0x82 Handshake 0x82 [uint8 trackerClass][uint8 colorId][string serialNo] serialNo is formatted as [manufacturerId][chipId] , so for TwometerVR controllers with an ESP Chip TVR[ESP.chipId] . The server must respond with 0x83 Handshake Reply 0x83 Handshake Reply 0x83 [uint8 trackerId] ..0xBF Reserved This packet range is reserved for (future) internal use. Modified trackers may use the subsequent packet ID range 0xC0..0xFF for extended functionality.","title":"Tracker Protocol"},{"location":"Network/Tracker%20Protocol/#tracker-protocol","text":"This UDP binary protocol is used for communication between the server and the trackers.","title":"Tracker Protocol"},{"location":"Network/Tracker%20Protocol/#base-structure","text":"[uint8 id][payload] If the MSB of id is set ( id & 0x80 != 0 ), then the lower 7 bytes of ID are treated as the ID of a management packet. If it's not set, the packet is interpreted as a tracker state packet and the lower 7 bytes are the tracker ID.","title":"Base structure"},{"location":"Network/Tracker%20Protocol/#0x00-0x7f-tracker-state","text":"[uint8 trackerId][uint16 buttons][vec4 rotation] buttons is a bitmask for pressed buttons: LSB->MSB is button 0->15 The button IDs are defined in the definitions file.","title":"0x00-0x7F Tracker State"},{"location":"Network/Tracker%20Protocol/#0x80-discovery-use-broadcast-channel","text":"0x80 0x02 0x16 0x39 0xA0 pID Identifier Identifier is a static key that identifies the Twometer VR 2.0 universe. It's the same as the SteamVR universe ID. The server must respond with 0x81 Discovery Reply","title":"0x80 Discovery (Use Broadcast Channel)"},{"location":"Network/Tracker%20Protocol/#0x81-discovery-reply","text":"0x81 [string serverIp] serverIp contains the IP or hostname of the server.","title":"0x81 Discovery Reply"},{"location":"Network/Tracker%20Protocol/#0x82-handshake","text":"0x82 [uint8 trackerClass][uint8 colorId][string serialNo] serialNo is formatted as [manufacturerId][chipId] , so for TwometerVR controllers with an ESP Chip TVR[ESP.chipId] . The server must respond with 0x83 Handshake Reply","title":"0x82 Handshake"},{"location":"Network/Tracker%20Protocol/#0x83-handshake-reply","text":"0x83 [uint8 trackerId]","title":"0x83 Handshake Reply"},{"location":"Network/Tracker%20Protocol/#0xbf-reserved","text":"This packet range is reserved for (future) internal use. Modified trackers may use the subsequent packet ID range 0xC0..0xFF for extended functionality.","title":"..0xBF Reserved"}]}